<Atlas_IoTDDL>
    <Atlas_Thing>
        <Descriptive_Metadata>
            <Thing_ATID>MySmartThing01</Thing_ATID>
            <Thing_Name>RaspberrryPi</Thing_Name>
            <Thing_Owner>IoTLab</Thing_Owner>
            <Thing_Vendor>RaspberryPiCo</Thing_Vendor>
            <Thing_Model>4B</Thing_Model>
            <Thing_ReleaseDate>8/2020</Thing_ReleaseDate>
            <Thing_Type>Thing of Things</Thing_Type>
            <Thing_OperatingSystem>Raspbian</Thing_OperatingSystem>
            <Thing_ShortDescription></Thing_ShortDescription>
            <LongDescription></LongDescription>
            <Thing_SSID>MySmartSpace</Thing_SSID>
            <Space_Coordinates></Space_Coordinates>
            <Space_Name>Office</Space_Name>
            <Space_Description></Space_Description>
            <Space_Constraints>
                <Temperature>
                    <Lower_Bound></Lower_Bound>
                    <Upper_Bound></Upper_Bound>
                </Temperature>
                <Humidity>
                    <Lower_Bound></Lower_Bound>
                    <Upper_Bound></Upper_Bound>
                </Humidity>
                <Voltage>
                    <Lower_Bound></Lower_Bound>
                    <Upper_Bound></Upper_Bound>
                </Voltage>
                <Radio_Interference_Radius></Radio_Interference_Radius>
                <Safe_Temperature_Radius></Safe_Temperature_Radius>
            </Space_Constraints>
        </Descriptive_Metadata>
        <Administrative_Metadata>
            <Network_Manager>
                <Module>WiFi</Module>
                <Type>Built-In</Type>
                <Network_Name>GL-SFT1200-300</Network_Name>
                <Network_Passcode>goodlife</Network_Passcode>
                <MulticastGroup>
                    <IP>232.1.1.1</IP>
                    <Port>1235</Port>
                </MulticastGroup>
                <Communication_Protocol></Communication_Protocol>
                <InterOperableCommunication>
                    <Broker>
                        <Vendor>HiveMQ</Vendor>
                        <Dashboard>http://www.mqtt-dashboard.com/</Dashboard>
                        <IP>broker.hivemq.com</IP>
                        <Port>1883</Port>
                    </Broker>
                    <Topic>
                        <Root>/Atlas</Root>
                        <Network_MQTTClient>/Network/MQTT_Client</Network_MQTTClient>
                        <Network_PrivateBroker>/Network/Private_Broker</Network_PrivateBroker>
                        <Multicast_ThingIdentity>/Multicast/Tweet_ThingIdentity</Multicast_ThingIdentity>
                        <Multicast_EntityIdentity>/Multicast/Tweet_EntityIdentity</Multicast_EntityIdentity>
                        <Multicast_API>/Multicast/API</Multicast_API>
                        <Unicast>/Unicast/Interaction</Unicast>
                    </Topic>
                </InterOperableCommunication>
                <OMA_DM>
                    <AccessName>Eclipse Leshan</AccessName>
                    <IP>coap://leshan.eclipseprojects.io</IP>
                    <Port>5683</Port>
                </OMA_DM>
            </Network_Manager>
            <Memory_Manager>
                <Store_Format></Store_Format>
                <MemoryUnit_Application></MemoryUnit_Application>
                <MemoryUnit_Knowledge></MemoryUnit_Knowledge>
            </Memory_Manager>
        </Administrative_Metadata>
        <Thing_Attachment>

        </Thing_Attachment>
        <Structural_Metadata>
            <Number_Hardware>2</Number_Hardware>
            <Number_Software>0</Number_Software>
            <Number_Hybrid>0</Number_Hybrid>
            <Number_Entities>2</Number_Entities>
        </Structural_Metadata>
    </Atlas_Thing>
    <Atlas_Entities>
        <Entity_1>
            <Descriptive_Metadata>
                <ID>DHT11Sensor</ID>
                <Name>DHT</Name>
                <Owner></Owner>
                <Vendor></Vendor>
                <Category>Hardware</Category>
                <Type>Connected</Type>
                <Description></Description>
            </Descriptive_Metadata>
            <Services>
                <Service_1>
                    <Name>ReadDHT</Name>
                    <AppCategory>Environment Monitor</AppCategory>
                    <Type>Report</Type>
                    <Keywords></Keywords>
                    <Description></Description>
                    <Contextual_Constraints>
                        <Time_Window>1seconds</Time_Window>
                        <Usage_Mode></Usage_Mode>
                        <Concurrent></Concurrent>
                    </Contextual_Constraints>
                    <Temporal_Constraints>
                        <Working>
                            <StartTime>6am</StartTime>
                            <EndTime>10pm</EndTime>
                        </Working>
                        <Callable>
                            <StartTime>6:30am</StartTime>
                            <EndTime>9:30pm</EndTime>
                        </Callable>
                    </Temporal_Constraints>
                    <OutputDescription>TH</OutputDescription>
                    <OutputType>int</OutputType>
                    <Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type

int dhtData[5] = {0};
int lastState = HIGH;
int j = 0;

if (wiringPiSetupGpio() == -1) {
    std::cerr << \"Error: wiringPiSetupGpio() failed.\" << std::endl;
    TH = -1; // error
} else {
    pinMode(18, OUTPUT);
    digitalWrite(18, LOW);
    delay(18);
    digitalWrite(18, HIGH);
    delayMicroseconds(40);
    pinMode(18, INPUT);

    for (int i = 0; i < 85; i++) {
        int count = 0;
        while (digitalRead(18) == lastState) {
            count++;
            delayMicroseconds(1);
            if (count == 255) break;
        }
        lastState = digitalRead(18);
        if (count == 255) break;

        if ((i >= 4) && (i % 2 == 0)) {
            dhtData[j / 8] <<= 1;
            if (count > 16)
                dhtData[j / 8] |= 1;
            j++;
        }
    }

    std::cout << "Bytes read from DHT11: ";
    for (int i = 0; i < 5; i++) {
        std::cout << \"dhtData[\" << i << \"]: \" << dhtData[i] << \" \";
    }
    std::cout << \"Total bits read: \" << j << std::endl;

    if ((j >= 40) && (dhtData[4] == ((dhtData[0] + dhtData[1] + dhtData[2] + dhtData[3]) & 0xFF))) {
        float temperature = dhtData[2] + dhtData[3] / 10.0;
        float humidity = dhtData[0] + dhtData[1] / 10.0;

        if (mode == 0) {
            TH = static_cast<int>(temperature);
        } else if (mode == 1) {
            TH = static_cast<int>(humidity);
        } else {
            std::cerr << \"Error: invalid mode.\" << std::endl;
            TH = -2;
        }
    } else {
        std::cerr << \"Error reading DHT11 sensor (checksum failed).\" << std::endl;
        TH = -1;
    }
}
]]></Service_Formula>
                    <Service_NumberInputs>1</Service_NumberInputs>
                    <Service_InputTypes>int</Service_InputTypes>
                    <Service_InputDescriptions>"mode"</Service_InputDescriptions>
                    <Library_Number>3</Library_Number>
                    <Libraries>wiringPi.h,iostream</Libraries>
                    <ADC_Number>0</ADC_Number>
                </Service_1>
                <Number_Services>1</Number_Services>
            </Services>
            <UnboundedService>
                <Number_UnboundedServices>0</Number_UnboundedServices>
            </UnboundedService>
            <Relationships>
                <Number_Relationships>0</Number_Relationships>
            </Relationships>
        </Entity_1>
        <Entity_2>
            <Descriptive_Metadata>
                <ID>ServoMotor01</ID>
                <Name>Servo</Name>
                <Owner></Owner>
                <Vendor></Vendor>
                <Category>Hardware</Category>
                <Type>Connected</Type>
                <Description></Description>
            </Descriptive_Metadata>
            <Services>
                <Service_1>
                    <Name>ActivateFan</Name>
                    <AppCategory>Ambiance</AppCategory>
                    <Type>Action</Type>
                    <Keywords></Keywords>
                    <Description></Description>
                    <Contextual_Constraints>
                        <Time_Window>1seconds</Time_Window>
                        <Usage_Mode>Single</Usage_Mode>
                        <Concurrent>No</Concurrent>
                    </Contextual_Constraints>
                    <Temporal_Constraints>
                        <Working>
                            <StartTime>6am</StartTime>
                            <EndTime>10pm</EndTime>
                        </Working>
                        <Callable>
                            <StartTime>6:30am</StartTime>
                            <EndTime>9:30pm</EndTime>
                        </Callable>
                    </Temporal_Constraints>
                    <OutputDescription>fanStatus</OutputDescription>
                    <OutputType>int</OutputType>
                    <Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type
// Single code block for fan control in IOT_DDL
// Global variables
int fanStatus = 0;     // 0 = not active, 1 = active
// Single code block for fan control in IOT_DDL
// Single global variable for status

// Main block

    // GPIO initialization
    if (wiringPiSetupGpio() == -1) {
        printf(\"Error initializing wiringPi!\");
        fanStatus = 0;
    }
    else {
        // Configure pin as output
        pinMode(17, OUTPUT);
        printf(\"Fan initialization completed\");

        // Set active status
        fanStatus = 1;

        // Main loop for fan simulation
        for (int cycle = 0; cycle < 5 && fanStatus == 1; cycle++) {
            printf(\"Cycle %d of 5\", cycle + 1);

            // Movement to 180 degrees
            printf(\"Moving to 180 degrees\");
            for (int i = 0; i < 10 && fanStatus == 1; i++) {
                digitalWrite(17, HIGH);
                delayMicroseconds(2500);
                digitalWrite(17, LOW);
                delayMicroseconds(5000);   // 5ms pause between pulses
            }

            // Short pause between movements
            delay(500);

            // Movement to 0 degrees
            printf(\"Moving to 0 degreesn");
            for (int i = 0; i < 10 && fanStatus == 1; i++) {
                digitalWrite(17, HIGH);
                delayMicroseconds(500);
                digitalWrite(17, LOW);
                delayMicroseconds(5000);   // 5ms pause between pulses
            }

            // Short pause between cycles
            delay(500);
        }

        // Return the servo to the neutral position (90 degrees) before terminating
        printf(\"Returning servo to center position...\");
        for (int i = 0; i < 5; i++) {
            digitalWrite(17, HIGH);
            delayMicroseconds(1500);
            digitalWrite(17, LOW);
            delayMicroseconds(5000);
        }

        printf(\"Fan simulation terminated.n");

    }
]]></Service_Formula>
                    <Service_NumberInputs>0</Service_NumberInputs>
                    <Service_InputTypes></Service_InputTypes>
                    <Service_InputDescriptions></Service_InputDescriptions>
                    <Library_Number>4</Library_Number>
                    <Libraries>wiringPi.h,unistd.h,stdio.h</Libraries>
                    <ADC_Number>0</ADC_Number>
                </Service_1>
                <Number_Services>1</Number_Services>
            </Services>
            <UnboundedService>
                <Number_UnboundedServices>0</Number_UnboundedServices>
            </UnboundedService>
            <Relationships>
                <Number_Relationships>0</Number_Relationships>
            </Relationships>
        </Entity_2>
    </Atlas_Entities>
</Atlas_IoTDDL>